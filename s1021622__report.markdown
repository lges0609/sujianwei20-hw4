**Clock Algorithm **
=======================================================
-------------------------------------------------------

##***What is Clock Algorithm ???***
> **Clock Algorithm**  是 **LRU algorithm** (Least recently used page-replacement) 的一種近似演算法, **LRU algorithm** (把過去到現在最久時間未使用的那頁替換掉) 雖然有許多優點
>但它在實做上卻是困難重重(必須依靠特殊的硬體支援，很少系統能夠完整地實作),利用 **Clock Algorithm** 來近似 **LRU algorithm** 增加實做可行性,也增加演算法速度.

當我們在學習page Replacement 時我們如何知道要找的記憶體位置是否已經被讀取進來了???
利用 ** Clock Algorithm ** 我們也可以增加判斷的容易度

-------------------------------------------------------
##***How to use Clock Algorithm ???***
**Clock Algorithm** 是利用一個環狀的queue 利用在每個page裡加入一個bit(0或1)來當成reference
當訪問page table時pointer會去檢查此reference.
> +  如果此reference的值是 *0* 就替換此頁面
> + 如果此reference的值是 *1* 那麼就給予該頁面第二次機會,繼續檢查下一個page並把該reference的值改成0

> + 如果某個page被時常使用,那它的reference就會時常保持在 *1*


----------------------------------------------------------------------------------------------------------
##***Reference ***
https://www.usenix.org/legacy/event/fast05/tech/full_papers/gill/gill_html/node12.html
http://pages.cs.wisc.edu/~bart/537/lecturenotes/s20.html
http://courses.cs.washington.edu/courses/csep544/99au/minirel/bufmgr.html
http://wenku.baidu.com/view/e167916748d7c1c708a14501.html
